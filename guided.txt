import cv2
import numpy as np
from matplotlib import pyplot as plt



img = cv2.imread('test.jpg', 0)
img=cv2.resize(img,(300,400))
# gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
norm_img=np.zeros((256,256))
final_img=cv2.normalize(img,norm_img,0,255,cv2.NORM_MINMAX)
blur = cv2.GaussianBlur(final_img,(15,15),0)
ret,binr = cv2.threshold(blur,135,255,cv2.THRESH_BINARY)
kernel = np.ones((3,3),np.uint8)
erosion = cv2.erode(binr,kernel,iterations = 1)
canny = cv2.Canny(blur, 20, 40)
result = cv2.bitwise_and(canny,canny,mask = erosion)

cv2.imshow("gf",result)
cv2.waitKey()  
cv2.destroyAllWindows()

#########NEW CODE#######

img = cv2.pyrDown(cv2.imread('test.jpg', cv2.IMREAD_UNCHANGED))

# threshold image
norm_img=np.zeros((255,255))
final_img=cv2.normalize(img,norm_img,0,255,cv2.NORM_MINMAX)
out = cv2.ximgproc.guidedFilter(final_img,final_img,8,800)

ret, threshed_img = cv2.threshold(cv2.cvtColor(out, cv2.COLOR_BGR2GRAY),
                127, 255, cv2.THRESH_BINARY)
# find contours and get the external one
cv2.imshow("tresh",threshed_img)
kernel = np.ones((10,10), np.uint8) 
img_dilation = cv2.dilate(threshed_img, kernel, iterations=3)  
img_erosion = cv2.erode(img_dilation, kernel, iterations=3) 
#cv2.imshow("before",img_erosion)
#img_erosion = cv2.erode(img_dilation, kernel, iterations=5) 
img_dilation = cv2.dilate(threshed_img, kernel, iterations=4)

img_erosion = cv2.erode(img_dilation, kernel, iterations=4) 
cv2.imshow("after",img_erosion)

contours, hier = cv2.findContours(img_erosion, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
#image, contours, hier = cv2.findContours(threshed_img, cv2.RETR_TREE,
#                cv2.CHAIN_APPROX_SIMPLE)

# with each contour, draw boundingRect in green
# a minAreaRect in red and
# a minEnclosingCircle in blue
for c in contours:
    # get the bounding rect
    x, y, w, h = cv2.boundingRect(c)
    # draw a green rectangle to visualize the bounding rect
    #cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # get the min area rect
    rect = cv2.minAreaRect(c)
    box = cv2.boxPoints(rect)
    # convert all coordinates floating point values to int
    box = np.int0(box)
    # draw a red 'nghien' rectangle
    #cv2.drawContours(img, [box], 0, (0, 0, 255))

    # finally, get the min enclosing circle
    (x, y), radius = cv2.minEnclosingCircle(c)
    # convert all values to int
    center = (int(x), int(y))
    radius = int(radius)
    # and draw the circle in blue
    #img = cv2.circle(img, center, radius, (255, 0, 0), 2)

print(len(contours))
cv2.drawContours(img, contours, -2, (0, 0, 255), 1)

cv2.imshow("contours", img)

#cv2.imshow("contours", img)

while True:
    key = cv2.waitKey(1)
    if key == 27: #ESC key to break
        break

cv2.destroyAllWindows()
